# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.schedulers import timed, forcesched

c = BuildmasterConfig = {}

####### WORKERS
c['workers'] = [
	worker.Worker("buildbot-worker01", "password"),
	worker.Worker("buildbot-worker02", "password"),
	worker.Worker("buildbot-worker03", "password"),
	worker.Worker("buildbot-test01"  , "password")
]
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES
#c['change_source'] = changes.GerritChangeSource(
#	"gerrit.flowmycode.com",
#	"buildbot",
#	handled_events=["change-merged"],
#	identity_file="/home/buildbot/.ssh/id_rsa")


####### SCHEDULERS
sch1 = schedulers.ForceScheduler(
	name="Enginering",
	buttonName="Launch an engineering build",
	builderNames=["engineering"],

	# Hide username and reason added by default
	username=util.UserNameParameter(hide=True),
	reason=util.StringParameter(name="reason", hide=True),

	# Set the mandatory codebases fields with fixed values
	codebases=[
		util.CodebaseParameter(
		    "",
		    name="Main repository",
		    branch=util.FixedParameter(name="branch", default="master"),
		    revision=util.FixedParameter(name="revision", default=""),
		    repository=util.FixedParameter(name="repository", default=""),
		    project=util.FixedParameter(name="project", default=""),
		),
	    ],

	# Custom field to get the flash file URL
	properties=[
		util.TextParameter(
			name="repo_downloads",
			label="Additionnal patches (gerrit URL):",
			default="",
			cols=20,
			rows=5)
		]
	)

sch2 = schedulers.ForceScheduler(
	name="MergeRequest",
	buttonName="Send a merge request",
	builderNames=["merge_request"],
	# Hide username and reason added by default
	username=util.UserNameParameter(hide=True),
	reason=util.StringParameter(name="reason", hide=True),

	# Set the mandatory codebases fields with fixed values
	codebases=[
		util.CodebaseParameter(
		    "",
		    name="Main repository",
		    branch=util.FixedParameter(name="branch", default="master"),
		    revision=util.FixedParameter(name="revision", default=""),
		    repository=util.FixedParameter(name="repository", default=""),
		    project=util.FixedParameter(name="project", default=""),
		),
	    ],

	# Custom field to get the flash file URL
	properties=[
		util.TextParameter(
			name="repo_downloads",
			label="Patches to merge (gerrit URL):",
			default="",
			cols=20,
			rows=5)
		]
	)

sch3 = schedulers.ForceScheduler(
	name="ReleaseCandidate",
	buttonName="Build a release candidate",
	builderNames=["release_candidate"],
	# Hide username and reason added by default
	username=util.UserNameParameter(hide=True),
	reason=util.StringParameter(name="reason", hide=True),

	# Set the mandatory codebases fields with fixed values
	codebases=[
		util.CodebaseParameter(
		    "",
		    name="Main repository",
		    branch=util.FixedParameter(name="branch", default="master"),
		    revision=util.FixedParameter(name="revision", default=""),
		    repository=util.FixedParameter(name="repository", default=""),
		    project=util.FixedParameter(name="project", default=""),
		),
	    ],

	# Custom field to get the flash file URL
	properties=[
		util.TextParameter(
			name="repo_downloads",
			label="Additionnal patches (gerrit URL):",
			default="",
			cols=20,
			rows=5)
		]
	)


sch4 = schedulers.ForceScheduler(
	name="PromoteRelease",
	buttonName="Promote a release",
	builderNames=["release_promotion"])

sch5 = schedulers.ForceScheduler(
	name="Test",
	buttonName="Launch a test on Curie",
	builderNames=["curiebsp_test"],

	# Hide username and reason added by default
	username=util.UserNameParameter(hide=True),
	reason=util.StringParameter(name="reason", hide=True),

	# Set the mandatory codebases fields with fixed values
	codebases=[
		util.CodebaseParameter(
		    "",
		    name="Main repository",
		    branch=util.FixedParameter(name="branch", default="master"),
		    revision=util.FixedParameter(name="revision", default=""),
		    repository=util.FixedParameter(name="repository", default=""),
		    project=util.FixedParameter(name="project", default=""),
		),
	    ],

	# Custom field to get the flash file URL
	properties=[
		util.StringParameter(
			name="flashfile_url",
         		label="ZIP flash file http url:",
         		default="")
	])

sch_compile = schedulers.Triggerable(
	name="compil-ubuild",
	builderNames=["curiebsp_compile"])

sch_test = schedulers.Triggerable(
	name="test-ubuild",
	builderNames=["curiebsp_test"])

c['schedulers'] = [sch1, sch2, sch3, sch4, sch5, sch_compile, sch_test]

####### FACTORIES
f_compil = util.BuildFactory()
f_compil.addStep(steps.Repo(name='Fetch Curie BSP code', manifestURL='ssh://gerrit.flowmycode.com:29418/curiebsp_manifest.git', haltOnFailure=True))
f_compil.addStep(steps.ShellCommand(name='Cherry-pick',command=["echo", util.Property('repo_downloads')], haltOnFailure=True))
f_compil.addStep(steps.ShellCommand(name='Cleaning',command=["make", "clean"], haltOnFailure=True))
f_compil.addStep(steps.ShellCommand(name='Cleaning',command=["rm", "-rf", "./pub/"], haltOnFailure=True))
f_compil.addStep(steps.ShellCommand(name='Compilation',
				    command=["make", util.Property('target'), "-j4"],
				    env = { 'BUILD_TYPE'	: util.Property('pbuildername'),
					    'BUILDNUMBER'	: util.Interpolate('%(prop:pbuildnumber)s'),
					    'BUILD_TAG' 	: util.Interpolate('%(prop:pbuildername)s-%(prop:pbuildnumber)s')},
				    haltOnFailure=True))
f_compil.addStep(steps.ShellSequence(name='Upload files',
				     commands=[
					util.ShellArg(command=["echo", "ssh", "storage.flowmycode.com" ,"mkdir", "-p", util.Interpolate('build/%(prop:pbuildername)s/%(prop:pbuildnumber)s/%(prop:target)s/')], logfile="mkdir", haltOnFailure=True),
					util.ShellArg(command=["echo", "chmod", "-R", "o+rx", "./pub/"], logfile="chmod", haltOnFailure=True),
					util.ShellArg(command=["/bin/sh", "-c", util.Interpolate("find ./pub/ -name *.zip -exec scp {} storage.flowmycode.com:build/%(prop:pbuildername)s/%(prop:pbuildnumber)s/%(prop:target)s/ \;")], logfile="copy", haltOnFailure=True)]))

factory_eng = util.BuildFactory()
factory_eng.addStep(steps.Trigger(schedulerNames=['compil-ubuild'],
                        waitForFinish=True,
                        updateSourceStamp=True,
                        set_properties={ 'pbuildername' : util.Property('buildername'),
					 'pbuildnumber' : util.Property('buildnumber'),
					 'target'	: "curie_ble",
					 'repo_downloads': util.Property('repo_downloads')}, haltOnFailure=True))
factory_eng.addStep(steps.Trigger(schedulerNames=['test-ubuild'],
                        waitForFinish=True,
                        updateSourceStamp=True,
                        set_properties={ 'flashfile_url': "http://storage.flowmycode.com/build/%(prop:pbuildername)s/%(prop:pbuildnumber)s"}))


factory_mr = util.BuildFactory()
factory_mr.addStep(steps.Trigger(schedulerNames=['compil-ubuild'],
                        waitForFinish=True,
                        updateSourceStamp=True,
                        set_properties={ 'pbuildername' : util.Property('buildername'),
					 'pbuildnumber' : util.Property('buildnumber'),
					 'target'	: "curie_ble",
					 'repo_downloads': util.Property('repo_downloads')}, haltOnFailure=True))
factory_mr.addStep(steps.Trigger(schedulerNames=['test-ubuild'],
                        waitForFinish=True,
                        updateSourceStamp=True,
                        set_properties={ 'flashfile_url': "http://storage.flowmycode.com/build/%(prop:pbuildername)s/%(prop:pbuildnumber)s"}))

factory_rc = util.BuildFactory()
factory_rc.addStep(steps.Trigger(schedulerNames=['compil-ubuild'],
                        waitForFinish=True,
                        updateSourceStamp=True,
                        set_properties={ 'pbuildername' : util.Property('buildername'),
					 'pbuildnumber' : util.Property('buildnumber'),
					 'target'	: "curie_ble",
					 'repo_downloads': util.Property('repo_downloads')}, haltOnFailure=True))
factory_rc.addStep(steps.Trigger(schedulerNames=['test-ubuild'],
                        waitForFinish=True,
                        updateSourceStamp=True,
                        set_properties={ 'flashfile_url': "http://storage.flowmycode.com/build/%(prop:pbuildername)s/%(prop:pbuildnumber)s"}))


factory_pr = util.BuildFactory()

factory_tests = util.BuildFactory()
factory_tests.addStep(steps.ShellCommand(name='Clean workspace', command=["rm", "-rf", "temp"], haltOnFailure=True))
factory_tests.addStep(steps.ShellCommand(name='Prepare workspace', command=["mkdir", "temp"], haltOnFailure=True))
factory_tests.addStep(steps.Repo(name='Sync flowmycode scripts', manifestURL='ssh://gerrit.flowmycode.com:29418/manifest.git', haltOnFailure=True))
factory_tests.addStep(steps.ShellCommand(name='Download flash file',
					 command=["wget", "--no-proxy", util.Property('flashfile_url'), "-O", "temp/flash.zip"], haltOnFailure=True))

factory_tests.addStep(steps.ShellCommand(name='Unzip flash files', command=["unzip", "./temp/flash.zip", "-d", "./temp/flash/"], haltOnFailure=True))
factory_tests.addStep(steps.ShellCommand(name='Reset device', command=["python", "./tests-scripts/curie_101/reset.py"], haltOnFailure=True))
#Comment the flashing as it is not very stable
#factory_tests.addStep(steps.ShellCommand(name='Flash device', command=["bash", "./tests-scripts/curie_101/flash.sh", "./temp/flash"]))
factory_tests.addStep(steps.ShellCommand(name='Move device', command=["python", "./tests-scripts/raspberry/servo.py", "-a4", "-a10", "-i1", "-o5"], haltOnFailure=True))


####### BUILDERS
workers = ["buildbot-worker01", "buildbot-worker02", "buildbot-worker03"]
testers = ["buildbot-test01"]
c['builders'] = [
	util.BuilderConfig(name="engineering",       workernames=workers, factory=factory_eng),
	util.BuilderConfig(name="merge_request",     workernames=workers, factory=factory_mr),
	util.BuilderConfig(name="release_candidate", workernames=workers, factory=factory_rc),
	util.BuilderConfig(name="release_promotion", workernames=workers, factory=factory_pr),
	util.BuilderConfig(name="curiebsp_compile",  workernames=workers, factory=f_compil),
	util.BuilderConfig(name="curiebsp_test",     workernames=testers, factory=factory_tests),
]

####### STATUS TARGETS
c['status'] = []

####### PROJECT IDENTITY
c['title'] = "Curie BSP"
c['titleURL'] = ""
c['buildbotURL'] = "http://buildbot.flowmycode.com:8010/"
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}))

####### DB URL
c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
